/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { NumberStr } from "./components/mt-image-recursive/mt-image-recursive";
import { HTMLMediaElement } from "@src/types";
import { BooleanAttribute } from "@src/util";
import { SettingsStore } from "@src/settings.store";
import { MtStoreChildComponent, MtStoreChildRenderer, Store, StoreState } from "./components/mt-store/types";
import { VNode } from "@stencil/core";
export namespace Components {
    interface AppRoot {
    }
    interface MtButton {
        "primary": boolean;
        "secondary": boolean;
    }
    interface MtDroppable {
    }
    interface MtFileDropZone {
    }
    interface MtImageRecursive {
        "clear": () => Promise<void>;
        "create": (mediaEl: HTMLMediaElement | undefined) => Promise<void>;
        "nbRecursion": NumberStr;
        "removeRecursion": () => Promise<void>;
        "width": NumberStr;
    }
    interface MtInputRange {
        "default": string | number;
        "emitOnInit": BooleanAttribute;
        "enabled": BooleanAttribute;
        "getValue": (force?: boolean) => Promise<number>;
        "max": string | number;
        "min": string | number;
        "name": string;
        "store": keyof SettingsStore;
        "value": string | number;
    }
    interface MtMediaPicker {
        "reset": () => Promise<void>;
    }
    interface MtRow {
    }
    interface MtStore {
        "childRenderer": MtStoreChildRenderer<StoreState> | MtStoreChildComponent<StoreState>;
        "childs": VNode[];
        "state": StoreState;
        "store": Store<StoreState>;
    }
    interface MtVisible {
        "visible": BooleanAttribute;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLMtButtonElement extends Components.MtButton, HTMLStencilElement {
    }
    var HTMLMtButtonElement: {
        prototype: HTMLMtButtonElement;
        new (): HTMLMtButtonElement;
    };
    interface HTMLMtDroppableElement extends Components.MtDroppable, HTMLStencilElement {
    }
    var HTMLMtDroppableElement: {
        prototype: HTMLMtDroppableElement;
        new (): HTMLMtDroppableElement;
    };
    interface HTMLMtFileDropZoneElement extends Components.MtFileDropZone, HTMLStencilElement {
    }
    var HTMLMtFileDropZoneElement: {
        prototype: HTMLMtFileDropZoneElement;
        new (): HTMLMtFileDropZoneElement;
    };
    interface HTMLMtImageRecursiveElement extends Components.MtImageRecursive, HTMLStencilElement {
    }
    var HTMLMtImageRecursiveElement: {
        prototype: HTMLMtImageRecursiveElement;
        new (): HTMLMtImageRecursiveElement;
    };
    interface HTMLMtInputRangeElement extends Components.MtInputRange, HTMLStencilElement {
    }
    var HTMLMtInputRangeElement: {
        prototype: HTMLMtInputRangeElement;
        new (): HTMLMtInputRangeElement;
    };
    interface HTMLMtMediaPickerElement extends Components.MtMediaPicker, HTMLStencilElement {
    }
    var HTMLMtMediaPickerElement: {
        prototype: HTMLMtMediaPickerElement;
        new (): HTMLMtMediaPickerElement;
    };
    interface HTMLMtRowElement extends Components.MtRow, HTMLStencilElement {
    }
    var HTMLMtRowElement: {
        prototype: HTMLMtRowElement;
        new (): HTMLMtRowElement;
    };
    interface HTMLMtStoreElement extends Components.MtStore, HTMLStencilElement {
    }
    var HTMLMtStoreElement: {
        prototype: HTMLMtStoreElement;
        new (): HTMLMtStoreElement;
    };
    interface HTMLMtVisibleElement extends Components.MtVisible, HTMLStencilElement {
    }
    var HTMLMtVisibleElement: {
        prototype: HTMLMtVisibleElement;
        new (): HTMLMtVisibleElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "mt-button": HTMLMtButtonElement;
        "mt-droppable": HTMLMtDroppableElement;
        "mt-file-drop-zone": HTMLMtFileDropZoneElement;
        "mt-image-recursive": HTMLMtImageRecursiveElement;
        "mt-input-range": HTMLMtInputRangeElement;
        "mt-media-picker": HTMLMtMediaPickerElement;
        "mt-row": HTMLMtRowElement;
        "mt-store": HTMLMtStoreElement;
        "mt-visible": HTMLMtVisibleElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface MtButton {
        "primary"?: boolean;
        "secondary"?: boolean;
    }
    interface MtDroppable {
        "onData"?: (event: CustomEvent<DataTransfer>) => void;
        "onDragging"?: (event: CustomEvent<boolean>) => void;
        "onFiles"?: (event: CustomEvent<FileList>) => void;
    }
    interface MtFileDropZone {
        "onFiles"?: (event: CustomEvent<FileList>) => void;
    }
    interface MtImageRecursive {
        "nbRecursion"?: NumberStr;
        "onNewWidth"?: (event: CustomEvent<number>) => void;
        "width"?: NumberStr;
    }
    interface MtInputRange {
        "default"?: string | number;
        "emitOnInit"?: BooleanAttribute;
        "enabled"?: BooleanAttribute;
        "max"?: string | number;
        "min"?: string | number;
        "name"?: string;
        "onData"?: (event: CustomEvent<number>) => void;
        "store"?: keyof SettingsStore;
        "value"?: string | number;
    }
    interface MtMediaPicker {
        "onFiles"?: (event: CustomEvent<FileList>) => void;
    }
    interface MtRow {
    }
    interface MtStore {
        "childRenderer"?: MtStoreChildRenderer<StoreState> | MtStoreChildComponent<StoreState>;
        "childs"?: VNode[];
        "state"?: StoreState;
        "store"?: Store<StoreState>;
    }
    interface MtVisible {
        "visible"?: BooleanAttribute;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "mt-button": MtButton;
        "mt-droppable": MtDroppable;
        "mt-file-drop-zone": MtFileDropZone;
        "mt-image-recursive": MtImageRecursive;
        "mt-input-range": MtInputRange;
        "mt-media-picker": MtMediaPicker;
        "mt-row": MtRow;
        "mt-store": MtStore;
        "mt-visible": MtVisible;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "mt-button": LocalJSX.MtButton & JSXBase.HTMLAttributes<HTMLMtButtonElement>;
            "mt-droppable": LocalJSX.MtDroppable & JSXBase.HTMLAttributes<HTMLMtDroppableElement>;
            "mt-file-drop-zone": LocalJSX.MtFileDropZone & JSXBase.HTMLAttributes<HTMLMtFileDropZoneElement>;
            "mt-image-recursive": LocalJSX.MtImageRecursive & JSXBase.HTMLAttributes<HTMLMtImageRecursiveElement>;
            "mt-input-range": LocalJSX.MtInputRange & JSXBase.HTMLAttributes<HTMLMtInputRangeElement>;
            "mt-media-picker": LocalJSX.MtMediaPicker & JSXBase.HTMLAttributes<HTMLMtMediaPickerElement>;
            "mt-row": LocalJSX.MtRow & JSXBase.HTMLAttributes<HTMLMtRowElement>;
            "mt-store": LocalJSX.MtStore & JSXBase.HTMLAttributes<HTMLMtStoreElement>;
            "mt-visible": LocalJSX.MtVisible & JSXBase.HTMLAttributes<HTMLMtVisibleElement>;
        }
    }
}
